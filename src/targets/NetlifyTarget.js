import BaseTarget from "./BaseTarget.js";
import {Section} from '@ltd/j-toml';
import packageVersions from "../main/package-versions.js";

let NETLIFY_STUB=`
//
// This file is automatically generated.
//
// Don't edit this file, and don't put it under version control!
//

import {MikrokatServer} from "mikrokat";

$VARS

let server=new MikrokatServer({
	target: "netlify",
	modules,
	imports,
	fileContent,
	services,
	serviceClasses
});

export default async function(request) {
	return await server.handleRequest({
		request: request
	});
}

export const config = { path: "/*" };
`;

export default class NetlifyTarget extends BaseTarget {
	constructor(arg) {
		super(arg);
	}

	async build() {
		await this.project.processProjectFile("public/404.html",null,async text=>{
			return "Not Found."
		});

		await this.project.writeStub("netlify/edge-functions/entrypoint.netlify.js",NETLIFY_STUB);
	}

	async init() {
		await this.project.processProjectFile("package.json","json",async pkg=>{
			if (!pkg.scripts) pkg.scripts={};
			if (!pkg.scripts["dev:netlify"])
				pkg.scripts["dev:netlify"]="TARGET=netlify mikrokat build && netlify dev --cwd=."

			if (!pkg.scripts["deploy:netlify"])
				pkg.scripts["deploy:netlify"]="TARGET=netlify mikrokat build && netlify deploy --cwd=."

			if (!pkg.dependencies) pkg.dependencies={};
			pkg.dependencies["netlify-cli"]="^"+packageVersions["netlify-cli"];

			return pkg;
		});

		await this.project.processProjectFile("netlify.toml","toml",async netlify=>{
			if (!netlify)
				netlify={};

			if (!netlify.build) netlify.build=Section({});
			netlify.build.publish="public";
			netlify.build.edge_functions = "netlify/edge-functions";
			netlify.build.command="";

			if (!netlify.edge_functions) {
				netlify.edge_functions=[Section({
					path: "/*",
					function: "entrypoint.netlify"
				})];
			}

			return netlify;
		});


		await this.project.processProjectFile(".gitignore","lines",async ignore=>{
			if (!ignore.includes(".netlify")) ignore.push(".netlify");
			if (!ignore.includes("netlify")) ignore.push("netlify");
		});

		/*this.project.log("Netlify initialized. Start a dev server with:");
		this.project.log();
		this.project.log("  npm run dev:netlify");
		this.project.log();
		this.project.log("Deploy with:");
		this.project.log();
		this.project.log("  npm run deploy:netlify");
		this.project.log();*/
	}
}