import BaseTarget from "./BaseTarget.js";
import {Section} from '@ltd/j-toml';
import packageVersions from "../main/package-versions.js";

let FASTLY_STUB=`
//
// This file is automatically generated.
//
// Don't edit this file!
//

import * as mod from "$ENTRYPOINT";
import {MikrokatServer} from "mikrokat";

let server=new MikrokatServer({mod: mod});

addEventListener("fetch", ev=>{
	ev.respondWith(server.handleRequest({
		request: ev.request
	}));
});
`;

let FASTLY_TOML_STUB=`
name="$NAME"
language="javascript"

[scripts]
  build="TARGET=fastly npx mikrokat build && npx js-compute-runtime .target/entrypoint.fastly.js ./bin/main.wasm"
`

export default class FastlyTarget extends BaseTarget {
	constructor(arg) {
		super(arg);
	}

	async build() {
		await this.cli.writeStub(".target/entrypoint.fastly.js",FASTLY_STUB);
	}

	async init() {
		await this.cli.processProjectFile("package.json","json",async pkg=>{
			if (!pkg.scripts) pkg.scripts={};
			if (!pkg.scripts["dev:fastly"])
				pkg.scripts["dev:fastly"]="fastly compute serve";

			if (!pkg.dependencies) pkg.dependencies={};
			pkg.dependencies["@fastly/cli"]="^"+packageVersions["@fastly/cli"];
			pkg.dependencies["@fastly/js-compute"]="^"+packageVersions["@fastly/js-compute"];
		});

		let pkg=await this.cli.processProjectFile("package.json","json");

		await this.cli.processProjectFile("fastly.toml","toml",async fastly=>{
			if (!fastly)
				fastly={};

			fastly.name=pkg.name;
			fastly.language="javascript";

			if (!fastly.scripts) fastly.scripts=Section({});
			fastly.scripts.build="TARGET=fastly npm run build && js-compute-runtime .target/entrypoint.fastly.js ./bin/main.wasm"

			return fastly;
		});

		await this.cli.processProjectFile(".gitignore","lines",async ignore=>{
			if (!ignore.includes("bin")) ignore.push("bin");
			if (!ignore.includes("pkg")) ignore.push("pkg");
		});

		this.cli.log("Fastly initialized. Start a dev server with:");
		this.cli.log();
		this.cli.log("  npm run dev:fastly");
		this.cli.log();
	}
}