import BasePlatform from "./BasePlatform.js";
import packageVersions from "../main/package-versions.js";
import {startCommand, findNodeBin, runCommand} from "../utils/node-util.js";
import {fileURLToPath} from 'url';
import fs, {promises as fsp} from "fs";
import path from "node:path";

const __dirname=path.dirname(fileURLToPath(import.meta.url));

let VERCEL_STUB=`
//
// This file is automatically generated.
//
// Don't edit this file, and don't put it under version control!
//

import MikrokatServer from "./__MikrokatServer.js";

$VARS

let server=new MikrokatServer(MIKROKAT_SERVER_CONF);

export default async function handler(request) {
	return await server.handleRequest({
		request: request
	});
}

export const config = {
	runtime: 'edge',
};
`;

export default class VercelPlatform extends BasePlatform {
	constructor(arg) {
		super(arg);
	}

	async build() {
		await fsp.copyFile(
			path.join(__dirname,"../main/MikrokatServer.js"),
			path.join(this.project.cwd,"api/__MikrokatServer.js")
		);

		await this.project.writeStub("api/entrypoint.vercel.js",VERCEL_STUB);
	}

	async init() {
		await this.project.processProjectFile("package.json","json",async pkg=>{
			if (!pkg)
				throw new Error("No package.json");

			if (!pkg.dependencies) pkg.dependencies={};
			pkg.dependencies["vercel"]="^"+packageVersions["vercel"];
		});

		await this.project.processProjectFile("vercel.json","json",async vercel=>{
			if (!vercel) vercel={};

			//vercel.buildCommand="PLATFORM=vercel mikrokat build";
			vercel.buildCommand="";

			if (!vercel.routes) {
				vercel.routes=[
					{
						"src": "/.*",
						"dest": "api/entrypoint.vercel.js"
					}
				];
			}

			return vercel;
		});

		await this.project.processProjectFile(".gitignore","lines",async ignore=>{
			if (!ignore.includes(".vercel")) ignore.push(".vercel");
			if (!ignore.includes("api")) ignore.push("api");
		});
	}

	async verifyInit() {
		if (!fs.existsSync(path.join(this.project.cwd,"vercel.json")))
			throw new DeclaredError("Vercel not initialized, no vercel.json. Run init.");
	}

	async devServer() {
		let options={
			//waitForOutput: "Ready!",
			waitForPort: this.project.port,
			nodeCwd: this.project.cwd,
			expect: 0
		}

		return await startCommand("vercel",[
			"--cwd",this.project.cwd,
			"dev",
			"--listen","0.0.0.0:"+this.project.port
		],options);
	}

	async deploy() {
		let options={
			nodeCwd: this.project.cwd,
			expect: 0,
		}

		return await runCommand("vercel",[
			"--cwd",this.project.cwd,
			"deploy"
		],options);
	}
}