import BasePlatform from "./BasePlatform.js";
import {Section} from '@ltd/j-toml';
import packageVersions from "../main/package-versions.js";
import {startCommand, findNodeBin} from "../utils/node-util.js";

let FASTLY_STUB=`
//
// This file is automatically generated.
//
// Don't edit this file, and don't put it under version control!
//

import {MikrokatServer} from "mikrokat/server";

$VARS

let server=new MikrokatServer(MIKROKAT_SERVER_CONF);

addEventListener("fetch", ev=>{
	ev.respondWith(server.handleRequest({
		request: ev.request
	}));
});
`;

export default class FastlyPlatform extends BasePlatform {
	constructor(arg) {
		super(arg);
	}

	async build() {
		await this.project.writeStub(".target/entrypoint.fastly.js",FASTLY_STUB);
	}

	async init() {
		await this.project.processProjectFile("package.json","json",async pkg=>{
			if (!pkg)
				throw new Error("No package.json");

			if (!pkg.dependencies) pkg.dependencies={};
			pkg.dependencies["@fastly/cli"]="^"+packageVersions["@fastly/cli"];
			pkg.dependencies["@fastly/js-compute"]="^"+packageVersions["@fastly/js-compute"];
		});

		let pkg=await this.project.processProjectFile("package.json","json");

		await this.project.processProjectFile("fastly.toml","toml",async fastly=>{
			if (!fastly)
				fastly={};

			fastly.name=pkg.name;
			fastly.language="javascript";

			if (!fastly.manifest_version)
				fastly.manifest_version=3;

			if (!fastly.scripts) fastly.scripts=Section({});
			fastly.scripts.build="npx --no-install js-compute-runtime .target/entrypoint.fastly.js ./bin/main.wasm"

			return fastly;
		});

		await this.project.processProjectFile(".gitignore","lines",async ignore=>{
			if (!ignore.includes("bin")) ignore.push("bin");
			if (!ignore.includes("pkg")) ignore.push("pkg");
		});
	}

	async devServer() {
		let options={
			waitForPort: this.project.port,
			//waitForOutput: "INFO Listening on",
			nodeCwd: this.project.cwd,
			expect: 0
		}

		return await startCommand("fastly",[
			"compute","serve",
			"--dir",this.project.cwd,
			"--addr","0.0.0.0:"+this.project.port
		],options);
	}
}