import BasePlatform from "./BasePlatform.js";
import {Section} from '@ltd/j-toml';
import packageVersions from "../main/package-versions.js";
import {startCommand, runCommand} from "../utils/node-util.js";

let NETLIFY_STUB=`
//
// This file is automatically generated.
//
// Don't edit this file, and don't put it under version control!
//

import {MikrokatServer} from "mikrokat/server";

$VARS

let server=new MikrokatServer(MIKROKAT_SERVER_CONF);

export default async function(request) {
	return await server.handleRequest({
		request: request
	});
}

export const config = { path: "/*" };
`;

export default class NetlifyPlatform extends BasePlatform {
	constructor(arg) {
		super(arg);
	}

	async build() {
		await this.project.processProjectFile("public/404.html",null,async text=>{
			return "Not Found."
		});

		await this.project.writeStub("netlify/edge-functions/entrypoint.netlify.js",NETLIFY_STUB);
	}

	async init() {
		await this.project.processProjectFile("package.json","json",async pkg=>{
			if (!pkg)
				throw new Error("No package.json");

			if (!pkg.dependencies) pkg.dependencies={};
			pkg.dependencies["netlify-cli"]="^"+packageVersions["netlify-cli"];

			return pkg;
		});

		await this.project.processProjectFile("netlify.toml","toml",async netlify=>{
			if (!netlify)
				netlify={};

			if (!netlify.build) netlify.build=Section({});
			netlify.build.publish="public";
			netlify.build.edge_functions = "netlify/edge-functions";
			netlify.build.command="";

			if (!netlify.edge_functions) {
				netlify.edge_functions=[Section({
					path: "/*",
					function: "entrypoint.netlify"
				})];
			}

			return netlify;
		});


		await this.project.processProjectFile(".gitignore","lines",async ignore=>{
			if (!ignore.includes(".netlify")) ignore.push(".netlify");
			if (!ignore.includes("netlify")) ignore.push("netlify");
		});
	}

	async devServer() {
		let options={
			//waitForOutput: "Local dev server ready",
			waitForPort: this.project.port,
			nodeCwd: this.project.cwd,
			expect: 0
		}

		return await startCommand("netlify",[
			"dev",
			"--cwd",this.project.cwd,
			"--no-open",
			"--port",this.project.port
		],options);
	}

	async deploy() {
		let options={
			nodeCwd: this.project.cwd,
			expect: 0,
		}

		return await runCommand("netlify",[
			"deploy",
			"--cwd",this.project.cwd,
		],options);
	}
}